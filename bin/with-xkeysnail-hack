#!/bin/bash
#
# This script is a hack to stabilize xkeysnail custom keybindings on
# Gnome's Activities Overview (and other gnome widgets), which lacks a
# WM_CLASS.
#
# When triggering the Overview, xkeysnail picks up the WM_CLASS of the
# application behind the Overview, which ocasionally messes up the
# Overview's keybindings. The hack works like this:
#
# - Detect if the Overview is visible.
#
# - If it's hidden, get the WM_CLASS of the current window and match
#   it against a list of apps where the global xkeysnail mappings are
#   ignored (example: Emacs and terminal apps).

# - If the current window matches the list, open a bogus application
#   (I'm using a dummy GTK program here) wherein xkeysnail's default
#   keymappings apply. This will change the WM_CLASS of the current
#   window, which will trick xkeysnail into applying the default
#   keybindings to Activities Overview.
#
# - Trigger Activies Overview
#
# - Sleep while the Overview is active. When hidden, hide the bogus
#   application as well.
#
# TIP: For things you can run look into main.js:
# https://github.com/GNOME/gnome-shell/blob/master/js/ui/main.js

active_command=$1
show_command=$2
hide_command=$3

if [[ -z "$active_command" ]] || [[ -z "$show_command" ]] || [[ -z "$hide_command" ]]; then
  echo "ERROR: Please, specify 3 arguments."
  echo
  echo "- The first argument is the JS command to know whether the widget is active;"
  echo "- Second comes the JS command to open the widget; "
  echo "- Third comes the JS command to close the widget."
  echo
  echo "Example:"
  echo
  echo "$ with-xkeysnail-hack \"Main.overview.visible\" \"Main.overview.show()\" \"Main.overview.hide()\""
  exit 1
fi

function send_command() {
  dbus-send \
    --session \
    --type=method_call \
    $2 \
    --dest=org.gnome.Shell \
    /org/gnome/Shell \
    org.gnome.Shell.Eval string:"$1"
}

function is_active() {
  echo \
    "$(send_command $active_command --print-reply)" |
    tail -1 |
    xargs |
    awk '{print $2}'
}

dropdown_terminal_is_open=$(wmctrl -l -x | grep 'Drop Down Terminal.DropDownTerminalWindow')
wm_id=$(xdotool getactivewindow)
wm_class=$(xprop -id "$wm_id" | grep WM_CLASS)
dropdown_terminal_is_focused=$(echo $wm_class | grep DropDownTerminal)

function toggle_dropdown_terminal {
  if [[ ! -z "$dropdown_terminal_is_open" ]]; then
    $HOME/bin/dummy &
  fi
}

toggle_dropdown_terminal

if [[ "$(is_active)" == "false" ]]; then
  # The lock is meant to correctly handle recursive activations. For
  # example, we might activate the activities overview and then
  # activate the run dialog before closing the former. If we close the
  # run dialog, it shouldn't close the dummy app; it should only close
  # the dummy app when the last activation is closed, in this case,
  # the activities overview.
  lock_dir="$HOME/.xkeysnail"
  lock_file="$lock_dir/${active_command}${show_command}${hide_command}"
  has_locks="$(ls -A $lock_dir)"

  mkdir $lock_dir 2> /dev/null
  touch $lock_file

  wm_id=$(xdotool getactivewindow)
  wm_class=$(xprop -id "$wm_id" | grep WM_CLASS)

  # This variable can be replaced with a regex-friendly string like
  # "Emacs|Gnome-terminal". Here I'm grabbing the app names from a
  # file that is also available to my xkeysnail config, to make it
  # DRY.
  ignored_apps=$(cat ~/.dotfiles/linux/xkeysnail/ignored_apps_on_default_mappings)
  is_ignored_app=$(echo $wm_class | egrep "$ignored_apps")

  if [[ ! -z "$is_ignored_app" ]] && [ ! "$has_locks" ]; then
    dummy &
  fi

  send_command "$show_command"

  if [[ ! -z "$is_ignored_app" ]] && [ ! "$has_locks" ]; then
    until [[ "$(is_active)" == "false" ]]; do
      sleep 0.01
    done

    killall dummy
  fi

  rm -f $lock_file
else
  send_command "$hide_command"
fi

if [[ ! -z "$dropdown_terminal_is_open" ]] && [[ ! -z "$dropdown_terminal_is_focused" ]]; then
  killall dummy

  $HOME/bin/toggle-dropdown-terminal Focus
fi
